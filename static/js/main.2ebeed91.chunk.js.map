{"version":3,"sources":["api/goods.ts","types/LoadType.ts","components/GoodList/GoodsList.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["getAll","fetch","then","response","ok","Error","json","catch","error","LoadType","get5First","a","goods","sort","prevGood","nextGood","name","localeCompare","slice","getRedGoods","filter","good","color","GoodsList","React","memo","className","map","style","id","Loader","App","useState","setGoods","NONE","isSelectedLoadType","setIsSelectedLoadType","isLoading","setIsLoading","dataLoadedAll","setDataLoadedAll","dataLoadedFirst5","setDataLoadedFirst5","dataLoadedOnlyRed","setDataLoadedOnlyRed","loadingError","setLoadingError","handleLoadData","useCallback","loadType","goodsFromServer","FIRST5","ONLYRED","loadingComplete","classNames","ALL","type","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ebeed91.chunk.js","sourcesContent":["import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not OK');\n      }\n\n      return response.json();\n    })\n    .catch(error => {\n      throw new Error(`Error fetching all goods: ${error}`);\n    });\n}\n\nexport const get5First = async () => {\n  try {\n    const goods = await getAll();\n\n    return goods\n      .sort((prevGood, nextGood) => prevGood.name.localeCompare(nextGood.name))\n      .slice(0, 5);\n  } catch (error) {\n    throw new Error(`Error fetching 5 first goods: ${error}`);\n  }\n};\n\nexport const getRedGoods = async () => {\n  try {\n    const goods = await getAll();\n\n    return goods\n      .filter(good => good.color === 'red');\n  } catch (error) {\n    throw new Error(`Error fetching only red goods: ${error}`);\n  }\n};\n","export enum LoadType {\n  NONE = 'none',\n  ALL = 'all',\n  FIRST5 = 'first5',\n  ONLYRED = 'onlyRed',\n}\n","import React from 'react';\nimport { Good } from '../../types/Good';\n\nimport './GoodsList.scss';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = React.memo(({ goods }) => (\n  <ul className=\"goods-list\">\n    {goods.map(good => (\n      <li\n        key={good.id}\n        data-cy=\"good\"\n        style={{ color: good.color }}\n        className=\"good\"\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n));\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"loader-container\">\n    <div className=\"loader\" />\n  </div>\n);\n","import React, { useState, useCallback } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\n\nimport { Good } from './types/Good';\nimport { LoadType } from './types/LoadType';\n\nimport { GoodsList } from './components/GoodList';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n\n  const [\n    isSelectedLoadType,\n    setIsSelectedLoadType,\n  ] = useState<LoadType>(LoadType.NONE);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [dataLoadedAll, setDataLoadedAll] = useState(false);\n  const [dataLoadedFirst5, setDataLoadedFirst5] = useState(false);\n  const [dataLoadedOnlyRed, setDataLoadedOnlyRed] = useState(false);\n  const [loadingError, setLoadingError] = useState('');\n\n  const handleLoadData = useCallback(async (loadType: LoadType) => {\n    setIsLoading(true);\n\n    setIsSelectedLoadType(loadType);\n\n    let goodsFromServer: Good[] = [];\n\n    try {\n      switch (loadType) {\n        case LoadType.FIRST5:\n          goodsFromServer = await get5First();\n\n          setDataLoadedFirst5(true);\n          setDataLoadedOnlyRed(false);\n          setDataLoadedAll(false);\n\n          break;\n\n        case LoadType.ONLYRED:\n          goodsFromServer = await getRedGoods();\n\n          setDataLoadedOnlyRed(true);\n          setDataLoadedFirst5(false);\n          setDataLoadedAll(false);\n\n          break;\n\n        default:\n          goodsFromServer = await getAll();\n\n          setDataLoadedAll(true);\n          setDataLoadedOnlyRed(false);\n          setDataLoadedFirst5(false);\n\n          break;\n      }\n\n      setGoods(goodsFromServer);\n      setLoadingError('');\n    } catch (error) {\n      setLoadingError('Failed to load data. Please try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const loadingComplete = !loadingError && !isLoading;\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"title\">Dynamic list of Goods</h1>\n\n        <div className=\"buttons is-centered\">\n          <button\n            className={classNames(\n              'button is-primary is-outlined',\n              {\n                'is-active': isSelectedLoadType === LoadType.ALL,\n              },\n            )}\n            type=\"button\"\n            data-cy=\"all-button\"\n            onClick={() => handleLoadData(LoadType.ALL)}\n            disabled={dataLoadedAll}\n          >\n            Load all goods\n          </button>\n\n          <button\n            className={classNames(\n              'button is-primary is-outlined',\n              {\n                'is-active': isSelectedLoadType === LoadType.FIRST5,\n              },\n            )}\n            type=\"button\"\n            data-cy=\"first-five-button\"\n            onClick={() => handleLoadData(LoadType.FIRST5)}\n            disabled={dataLoadedFirst5}\n          >\n            Load 5 first goods\n          </button>\n\n          <button\n            className={classNames(\n              'button is-primary is-outlined',\n              {\n                'is-active': isSelectedLoadType === LoadType.ONLYRED,\n              },\n            )}\n            type=\"button\"\n            data-cy=\"red-button\"\n            onClick={() => handleLoadData(LoadType.ONLYRED)}\n            disabled={dataLoadedOnlyRed}\n          >\n            Load red goods\n          </button>\n        </div>\n\n        {loadingError && (\n          <p className=\"error\">\n            {loadingError}\n          </p>\n        )}\n\n        {isLoading && <Loader />}\n\n        {loadingComplete && (\n          <GoodsList goods={goods} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}