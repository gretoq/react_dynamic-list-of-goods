{"version":3,"sources":["api/goods.ts","types/LoadType.ts","components/GoodList/GoodsList.tsx","components/Loader/Loader.tsx","App.tsx","index.tsx"],"names":["getAll","fetch","then","response","ok","Error","json","catch","error","LoadType","get5First","a","goods","sort","prevGood","nextGood","name","localeCompare","slice","getRedGoods","filter","good","color","GoodsList","React","memo","className","map","style","id","Loader","App","useState","setGoods","NONE","isSelectedLoadType","setIsSelectedLoadType","isLoading","setIsLoading","loadingError","setLoadingError","handleLoadData","useCallback","loadCallback","goodsFromServer","loadingComplete","isButtonActive","loadType","classNames","ALL","type","onClick","loadFunction","disabled","FIRST5","ONLYRED","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0a8b5cac.chunk.js","sourcesContent":["import { Good } from '../types/Good';\n\n// eslint-disable-next-line\nconst API_URL = `https://mate-academy.github.io/react_dynamic-list-of-goods/goods.json`;\n\nexport function getAll(): Promise<Good[]> {\n  return fetch(API_URL)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not OK');\n      }\n\n      return response.json();\n    })\n    .catch(error => {\n      throw new Error(`Error fetching all goods: ${error}`);\n    });\n}\n\nexport const get5First = async () => {\n  try {\n    const goods = await getAll();\n\n    return goods\n      .sort((prevGood, nextGood) => prevGood.name.localeCompare(nextGood.name))\n      .slice(0, 5);\n  } catch (error) {\n    throw new Error(`Error fetching 5 first goods: ${error}`);\n  }\n};\n\nexport const getRedGoods = async () => {\n  try {\n    const goods = await getAll();\n\n    return goods\n      .filter(good => good.color === 'red');\n  } catch (error) {\n    throw new Error(`Error fetching only red goods: ${error}`);\n  }\n};\n","export enum LoadType {\n  NONE = 'none',\n  ALL = 'all',\n  FIRST5 = 'first5',\n  ONLYRED = 'onlyRed',\n}\n","import React from 'react';\nimport { Good } from '../../types/Good';\n\nimport './GoodsList.scss';\n\ntype Props = {\n  goods: Good[]\n};\n\nexport const GoodsList: React.FC<Props> = React.memo(({ goods }) => (\n  <ul className=\"goods-list\">\n    {goods.map(good => (\n      <li\n        key={good.id}\n        data-cy=\"good\"\n        style={{ color: good.color }}\n        className=\"good\"\n      >\n        {good.name}\n      </li>\n    ))}\n  </ul>\n));\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"loader-container\">\n    <div className=\"loader\" />\n  </div>\n);\n","import React, { useState, useCallback } from 'react';\nimport classNames from 'classnames';\nimport './App.scss';\n\nimport { getAll, get5First, getRedGoods } from './api/goods';\n\nimport { Good } from './types/Good';\nimport { LoadType } from './types/LoadType';\n\nimport { GoodsList } from './components/GoodList';\nimport { Loader } from './components/Loader';\n\nexport const App: React.FC = () => {\n  const [goods, setGoods] = useState<Good[]>([]);\n\n  const [\n    isSelectedLoadType,\n    setIsSelectedLoadType,\n  ] = useState<LoadType>(LoadType.NONE);\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [loadingError, setLoadingError] = useState('');\n\n  const handleLoadData = useCallback(async (loadCallback) => {\n    setIsLoading(true);\n\n    const goodsFromServer: Good[] = await loadCallback();\n\n    try {\n      setGoods(goodsFromServer);\n      setLoadingError('');\n    } catch (error) {\n      setLoadingError('Failed to load data. Please try again later.');\n    } finally {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const loadingComplete = !loadingError && !isLoading;\n\n  const handleButtonClick = (\n    loadFunction: () => Promise<Good[]>,\n    loadType: LoadType,\n  ) => {\n    setIsSelectedLoadType(loadType);\n    handleLoadData(loadFunction);\n  };\n\n  const isButtonActive = (loadType: LoadType) => {\n    return isSelectedLoadType === loadType;\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <h1 className=\"title\">Dynamic list of Goods</h1>\n\n        <div className=\"buttons is-centered\">\n          <button\n            className={classNames(\n              'button is-primary is-outlined',\n              {\n                'is-active': isButtonActive(LoadType.ALL),\n              },\n            )}\n            type=\"button\"\n            data-cy=\"all-button\"\n            onClick={() => handleButtonClick(getAll, LoadType.ALL)}\n            disabled={isButtonActive(LoadType.ALL)}\n          >\n            Load all goods\n          </button>\n\n          <button\n            className={classNames(\n              'button is-primary is-outlined',\n              {\n                'is-active': isButtonActive(LoadType.FIRST5),\n              },\n            )}\n            type=\"button\"\n            name=\"first5\"\n            data-cy=\"first-five-button\"\n            onClick={() => {\n              setIsSelectedLoadType(LoadType.FIRST5);\n              handleLoadData(get5First);\n            }}\n            disabled={isButtonActive(LoadType.FIRST5)}\n          >\n            Load 5 first goods\n          </button>\n\n          <button\n            className={classNames(\n              'button is-primary is-outlined',\n              {\n                'is-active': isButtonActive(LoadType.ONLYRED),\n              },\n            )}\n            type=\"button\"\n            name=\"onlyRed\"\n            data-cy=\"red-button\"\n            onClick={() => {\n              setIsSelectedLoadType(LoadType.ONLYRED);\n              handleLoadData(getRedGoods);\n            }}\n            disabled={isButtonActive(LoadType.ONLYRED)}\n          >\n            Load red goods\n          </button>\n        </div>\n\n        {loadingError && (\n          <p className=\"error\">\n            {loadingError}\n          </p>\n        )}\n\n        {isLoading && <Loader />}\n\n        {loadingComplete && (\n          <GoodsList goods={goods} />\n        )}\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}